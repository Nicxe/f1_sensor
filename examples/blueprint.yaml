blueprint:
  homeassistant:
    min_version: 2024.6.0
  name: "F1 Track Status Light"
  description: >
    ## Lights out and away we go! 🏁

    This blueprint gives Formule 1 Race Control the posibility to control the lights in your house!


    <details>
    <summary><b>Parc fermé</b> 👈</summary>


    This blueprint is only usefull when setup correctly so please pay attention to the possibilitys as discribed below:

    If you have any questions, issues or ideas please submit it [here](https://github.com/Nicxe/f1_sensor/issues/new/) so it can be looked into.

    ## Testing

    To test this blueprint make sure that your selected `Race has ended` in `Race phase`

    After that you can change the status off the `Track state` sensor under [developer tools](https://my.home-assistant.io/redirect/developer_states/).

    ## Blueprint settings

    You can create a optional [helper](https://my.home-assistant.io/redirect/helpers/) that can be switched on or off. This is usefull when you want to enable of disable the blueprint really quick.
    Yes, it's possible to enable or disable the automation itself but that could be harder to implement on a other automation.

    ## Track sensors

    This section needs to be filled in to communicate between the lights and the data provided by the add-on. 

    - Session State: The sensors that reports the current race session state
      - Default: `sensor.f1_session_status`
    - Track State: The sensors that reports the current track state
      - Default: `sensor.f1_track_status`
    - Race phase: The blueprint will only run in the selected phases
      - Advised: `Race is on-going (live)`, `Race is suspended` and `Race has finished`

    ## Device tracker

    Here are 2 options:

    - Devices gives you the opportunity to monitor if the device is at home.
      - When selecting multiple devices it triggers when at least one device is at home
    - Mediaplayer gives you the opportunity to monitor the state of a mediaplayer, currently only the domain `media_player` is possible
      - Current states to check: `on` and `playing`

    ## Do not disturb

    If turned on the blueprint will canceled if the current system time is between the start and end time.

    ## Light settings

    - 💡 Light to Control: The device that needs to be controlled

    - 🔆 Brightness Percentage: The brightness off the device that is controlled

    - 💨 Transition Time: The time between state changes
      - When you choose '0' the light will change immediately, that could be a bit annoying.

    ## Flag colors

    Give each flag it's own RGB color, you're lights will transform to this color based on flag status during the race

    - 🟩 Clear ('Green'): No problems on track, free to race
      - Default: `0`, `255`, `0`
    - 🟨 Yellow: Yellow flag has raised
      - Default: `255`, `255`, `0`
    - 🟥 Red: Race is suspended
      - Default: `255`, `0`, `0`

    ## (Virtual) Safety Car

    Specific settings for when there is a (Virtual) Safety Car on track

    - Virtual Safety Car: Color for when there is a virtual safety car
      - Default: `255`, `255`, `0`
    - Safety Car: COlor for when there is a safety car
      - Default: `255`, `0`, `0`
    - Flash for SC and VSC: Does the light needs to flash on a (virtual) safety car?
      - Default `on`
    - Flash Time: The time between pulsing on and off
      - Default: `1` second

    ## Custum template

    In the custom template section you can create you're own template options. Please be aware that the result needs to be `true` for the blueprint to run. If the return of your template is `false` the blueprint wont run. Leave empty if you don't want to use this option.

    </details>

  domain: automation
  author: Toppe
  input:
    #Setting the section for sensor inputs. Give's user the ability to specify the sensors
    blueprint_settings:
      name: Blueprint Settings
      icon: mdi:cog-box
      description: >
        Set the correct values for the blueprint settings.
      collapsed: false
      input:
        boolean_helper:
          name: Blueprint helper
          description: >
            Select the helper boolean to determine if the blueprint should run or not
          default: ""
          selector:
            entity:
              filter:
                - domain: input_boolean
              multiple: false

    #Setting the section for sensor inputs. Give's user the ability to specify the sensors
    sensors_section:
      name: Track sensors
      icon: mdi:go-kart-track
      description: >
        Select the correct sensors to determine the current session and track status.
      collapsed: true
      input:
        session_status_sensor:
          name: Session State
          description: >
            Sensor indicating the current session state.
          default: ""
          selector:
            entity:
              filter:
                - domain: sensor
              multiple: false
        track_status_sensor:
          name: Track state
          description: >
            Sensor indicating the current session state.
          default: ""
          selector:
            entity:
              filter:
                - domain: sensor
              multiple: false
        session_type_list:
          name: Race phase
          description: >
            Select in what phase this blueprint need's to be executed.
          default: "Race is on-going (live)"
          selector:
            select:
              mode: dropdown
              multiple: true
              options:
                - label: "Pre-race"
                  value: pre
                - label: "Race is on-going (live)"
                  value: live
                - label: "Race is suspended"
                  value: suspended
                - label: "Race has finished"
                  value: finished
                - label: "Race has finalised"
                  value: finalised
                - label: "Race has ended"
                  value: ended

    #Setting the section for the device based
    device_based:
      name: Device tracker
      icon: mdi:tablet-cellphone
      collapsed: true
      description: >
        When activated the blueprint will run when *one* of the selected devices has the status 'home'. Leave empty when you don't want to use this option.
      input:
        device_list:
          name: 📱 Devices
          description: >
            The devices that should be checked if there home. Select none is you dont want to use this.
          default: ""
          selector:
            entity:
              filter:
                - domain: device_tracker
              multiple: true
        media_player:
          name: 📱 Mediaplayer
          description: >
            Select the mediaplayer that should be watched.
          default: ""
          selector:
            entity:
              filter:
                - domain: media_player
              multiple: false

    #Setting the section for the time base to turn on (and off) do not disturb
    time_based:
      name: Do not disturb
      icon: mdi:minus-circle-off
      description: >
        Adjust time sensitive working of the blueprint, when enabled to blueprint will not work between the specified hours.
      collapsed: true
      input:
        do_not_disturb:
          name: "🔇 Do not disturb"
          description: "If enabled a do not disturb state will turn on. Between that time nothing will hapen regardless the state of the race. Usefull for when you are sleeping or having visitors."
          default: "enabled"
          selector:
            select:
              options:
                - label: "Enabled"
                  value: enabled
                - label: "Disabled"
                  value: disabled
        dnd_start:
          name: "▶️ Start time"
          description: "Start time to turn on do not disturb"
          default: "23:00:00"
          selector:
            time:
        dnd_end:
          name: "⏹️ End time"
          description: "End time to turn off do not disturb"
          default: "07:00:00"
          selector:
            time:

    #Setting the section for the lights that needs to be controlled included  the transition and brightness
    lights_section:
      name: Light settings
      icon: mdi:traffic-light
      description: >
        Select the entity for the lights. When multiple lights need to be controlled please create a light [group](https://www.home-assistant.io/integrations/group/) instead of seperate entities!
      collapsed: true
      input:
        light_entity:
          name: "💡 Light to Control"
          description: >
            The light entity whose color and brightness will be updated
          default: ""
          selector:
            entity:
              filter:
                - domain: light
        brightness:
          name: "🔆 Brightness Percentage"
          description: >
            Brightness level when turning the light on (0–100%)
          default: 100
          selector:
            number:
              min: 0
              max: 100
              unit_of_measurement: "%"
        transition_time:
          name: "⏱️ Transition Time"
          description: >
            Time in seconds for the light to transition to the new settings
          default: 1
          selector:
            number:
              min: 0
              max: 5
              step: 0.5
              unit_of_measurement: "s"

    #Setting the section for the flag colors
    flag_color:
      name: Flag colors
      icon: mdi:palette
      description: >
        Give each flag it's own color
      collapsed: true
      input:
        clear_rgb:
          name: "🟩 Clear ('Green')"
          description: "The color for when the track is clear."
          default: [0, 255, 0]
          selector:
            color_rgb: {}
        yellow_rgb:
          name: "🟨 Yellow"
          description: "The color for when there is a yellow flag."
          default: [255, 255, 0]
          selector:
            color_rgb: {}
        red_rgb:
          name: "🟥 Red"
          description: "The color for when there is a red flag."
          default: [255, 0, 0]
          selector:
            color_rgb: {}

    #Setting the section for the SC/VSC
    sc:
      name: (Virtual) Safety Car
      icon: mdi:car-emergency
      description: Specific settings for a safety car.
      collapsed: true
      input:
        vsc_rgb:
          name: "🟨 Virtual Safety Car"
          description: "The color for when there is a virtual safety car"
          default: [255, 255, 0]
          selector:
            color_rgb: {}
        sc_rgb:
          name: "🟥 Safety Car"
          description: "The color for when the safety car is on track"
          default: [255, 0, 0]
          selector:
            color_rgb: {}
        flash_on_sc:
          name: "🪩 Flash for SC and VSC"
          description: "Should the lights be flashing when a SC or VSC is active?"
          default: true
          selector:
            boolean:
        flash_time:
          name: "⏱️ Flash Time"
          description: "Time between on-off behavior"
          default: 1
          selector:
            number:
              min: 0
              max: 5
              step: 1
              unit_of_measurement: "s"

    #Enable custom jinja templating
    custom_template_section:
      name: Custom Template
      icon: mdi:code-braces
      description: >
        Custom template
      collapsed: true
      input:
        custom_template:
          name: "🖹 Custom Template"
          description: >
            Write you're own Jinja2 template, please note that the return state should be **true* or **false**. Leave empty if you don't want to use it.
          default: ""
          selector:
            template:

variables:
  devices: !input device_list
  mediaplayer: !input media_player
  light_id: !input light_entity
  flashing: !input flash_on_sc
  dnd_state: !input do_not_disturb
  dnd_start: !input dnd_start
  dnd_end: !input dnd_end
  template_config: !input custom_template
  blueprint_active: !input boolean_helper

#Set the trigger, in this case the input defined in the track_status_sensor
trigger:
  - trigger: state
    entity_id: !input track_status_sensor

#Set some specific conditions like the phase of the race, check if DND is turned on and if the time is between the start and eind time
condition:
  - condition: state
    entity_id: !input session_status_sensor
    state: !input session_type_list

  - condition: template
    value_template: >
      {% if blueprint_active | length > 0 %}
        {{ (states(blueprint_active) == "on") | iif(true, false) }}
      {% else %}
        true
      {% endif %}

  - condition: template
    value_template: >
      {% if devices | length > 0 %}
        {{ expand(devices) | selectattr('state', 'eq', 'home') | list | count > 0 }}
      {% else %}
        true
      {% endif %}

  - condition: template
    value_template: >
      {% set custom = states(template_config) %}
      {% if template_config | length > 0 %}
        {{ template_config }}
      {% else %}
        true
      {% endif %}

  - condition: template
    value_template: >
      {% if mediaplayer | length > 0 %}
        {{ expand(mediaplayer) | selectattr('state', 'in', ['playing', 'on']) | list }}
      {% else %}
        true
      {% endif %}

  - condition: not
    conditions:
      - condition: template
        value_template: >
          {{ is_state(dnd_state, 'enabled') }}
      - condition: template
        value_template: >
          {% set now = now().hour * 3600 + now().minute * 60 + now().second %}
          {% set start_raw = states(dnd_start) %}
          {% set end_raw = states(dnd_end) %}
          {% set start = (start_raw.split(':')[0]|default(0)|int * 3600) + (start_raw.split(':')[1]|default(0)|int * 60) if ':' in start_raw else 0 %}
          {% set end = (end_raw.split(':')[0]|default(0)|int * 3600) + (end_raw.split(':')[1]|default(0)|int * 60) if ':' in end_raw else 0 %}
          {{ (start <= end and start <= now <= end) or (start > end and (now >= start or now <= end)) }}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'CLEAR' }}"
        sequence:
          - action: light.turn_on
            target:
              entity_id: !input light_entity
            data:
              brightness_pct: !input brightness
              rgb_color: !input clear_rgb
              transition: !input transition_time
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'YELLOW' }}"
        sequence:
          - action: light.turn_on
            target:
              entity_id: !input light_entity
            data:
              brightness_pct: !input brightness
              rgb_color: !input yellow_rgb
              transition: !input transition_time
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'RED' }}"
        sequence:
          - action: light.turn_on
            target:
              entity_id: !input light_entity
            data:
              brightness_pct: !input brightness
              rgb_color: !input red_rgb
              transition: !input transition_time
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'SC' }}"
        sequence:
          - if:
              - condition: template
                value_template: >
                  {{ flashing }}
            then:
              repeat:
                while:
                  - condition: state
                    entity_id: sensor.f1_track_status
                    state: SC
                sequence:
                  - action: light.turn_on
                    metadata: {}
                    data:
                      rgb_color: !input sc_rgb
                    target:
                      entity_id: !input light_entity
                  - delay:
                      hours: 0
                      minutes: 0
                      seconds: !input flash_time
                      milliseconds: 0
                  - action: light.turn_off
                    metadata: {}
                    data: {}
                    target:
                      entity_id: !input light_entity
                  - delay:
                      hours: 0
                      minutes: 0
                      seconds: !input flash_time
                      milliseconds: 0
            else:
              - action: light.turn_on
                target:
                  entity_id: !input light_entity
                data:
                  brightness_pct: !input brightness
                  rgb_color: !input sc_rgb
                  transition: !input transition_time
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'VSC' }}"
        sequence:
          - if:
              - condition: template
                value_template: >
                  {{ flashing }}
            then:
              repeat:
                while:
                  - condition: state
                    entity_id: sensor.f1_track_status
                    state: VSC
                sequence:
                  - action: light.turn_on
                    metadata: {}
                    data:
                      rgb_color: !input vsc_rgb
                    target:
                      entity_id: !input light_entity
                  - delay:
                      hours: 0
                      minutes: 0
                      seconds: !input flash_time
                      milliseconds: 0
                  - action: light.turn_off
                    metadata: {}
                    data: {}
                    target:
                      entity_id: !input light_entity
                  - delay:
                      hours: 0
                      minutes: 0
                      seconds: !input flash_time
                      milliseconds: 0
            else:
              - action: light.turn_on
                target:
                  entity_id: !input light_entity
                data:
                  brightness_pct: !input brightness
                  rgb_color: !input sc_rgb
                  transition: !input transition_time
    default:
      - action: light.turn_off
        target:
          entity_id: !input light_entity
        data:
          transition: !input transition_time
mode: restart
